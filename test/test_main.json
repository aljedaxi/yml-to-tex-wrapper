{"outfile": "learning-to-program.tex", "outfile_content": "\\documentclass{article}\n\\usepackage{ulem}\n\\title{Learning To Program}\n\\author{daxi}\n\\begin{document}\n\t\\maketitle\n\t\\tableofcontents\n\t\\section{intro}\n\t\\subsection{Thus, the goals of a programming system should be}\n\t\\begin{enumerate}\n\t\t\\item to support and encourage powerful ways of thinking\n\t\t\\item to enable programmers to see and understand the execution of their programs\n\t\\end{enumerate}\n\t\\subsection{We change programming. We turn it into something that's understandable by people}\n\t\\begin{enumerate}\n\t\t\\item what is the actual goal of what we're doing? What behaviors are we trying to enable?\n\t\t\\item are we trying to create professional programmers? Or are we trying to create people who aren't afraid of the command line?\n\t\t\\item once we understand what we're really trying to do, it's then that we can create our curriculum.\n\t\t\\item it is worth considering that most of the people we're trying to teach to program aren't good at it, will never be good at it, and don't ever want to be good at it. most people don't want to---and probably can't---be the epic hacker we want to mould them into to.\n\t\t\\item so what's the point?\n\t\\end{enumerate}\n\t\\section{contents}\n\t\\subsection{environment}\n\t\\subsubsection{read the vocabulary}\n\t\\begin{enumerate}\n\t\t\\item would we want a system that allows the user to mouse over a given keyword a get an explanation?\n\t\t\\item to mouse over a variable and see everywhere it's defined?\n\t\t\\begin{enumerate}\n\t\t\t\\item you can jig this together by abusing your search feature\n\t\t\t\\item you can do that in vi with `*'\n\t\t\\end{enumerate}\n\t\t\\item do you remember when programmers were in tears about how their students wouldn't be doing `real programming' if they wrote assembly instead of machine code?\n\t\t\\begin{enumerate}\n\t\t\t\\item we must overcome our attachment to the machine.\n\t\t\t\\item it's interesting to think about when we've progressed far enough that we no longer have to teach those old concepts.\n\t\t\t\\begin{enumerate}\n\t\t\t\t\\item when have we reached the point where even teaching loops is pointless?\n\t\t\t\\end{enumerate}\n\t\t\\end{enumerate}\n\t\\end{enumerate}\n\t\\subsubsection{follow the flow}\n\t\\begin{enumerate}\n\t\t\\item something like a debugger but less annoying\n\t\t\\item more visual?\n\t\t\\item there's a reason i don't use debuggers\n\t\\end{enumerate}\n\t\\subsubsection{see the state}\n\t\\begin{enumerate}\n\t\t\\item debuggers?\n\t\\end{enumerate}\n\t\\subsubsection{create by reacting, create by abstracting}\n\t\\begin{enumerate}\n\t\t\\item this is the UNIX, bottom up philosophy to program design\n\t\t\\begin{enumerate}\n\t\t\t\\item maligned by the fools in the universities, but brought back by agile development\n\t\t\\end{enumerate}\n\t\\end{enumerate}\n\t\\subsection{language}\n\t\\subsubsection{identity and metaphor}\n\t\\begin{enumerate}\n\t\t\\item is this a question of good variable names?\n\t\t\\item is this a question of starting with OOP?\n\t\t\\item is this a question of project based, actually useful programming techniques?\n\t\t\\item having been thinking for the past ten minutes, i think this is the best way, at least for teens.\n\t\t\\begin{enumerate}\n\t\t\t\\item i learned to program through the command line: automating my writing projects. While other people never understood how this knowledge could do anything for them, i viewed programming as something invaluable to my everyday existence.\n\t\t\t\\item it's the ability to use the command line that gave me this freedom.\n\t\t\\end{enumerate}\n\t\\end{enumerate}\n\t\\subsubsection{decomposition}\n\t\\begin{enumerate}\n\t\t\\item how do i actually put a program together?\n\t\t\\item it begins to answer the question of where to start\n\t\t\\item i guess this is why we need to teach functions early\n\t\\end{enumerate}\n\t\\subsubsection{composition}\n\t\\begin{enumerate}\n\t\t\\item recomposition implies that you start at x, break it into [y], and end with x. what if you start with [y]?\n\t\t\\begin{enumerate}\n\t\t\t\\item it privileges a top down design philosophy that i don't think is useful here.\n\t\t\\end{enumerate}\n\t\t\\item how do i actually put a program together?\n\t\t\\item it begins to answer the question of where to start\n\t\\end{enumerate}\n\t\\subsubsection{readability}\n\t\\begin{enumerate}\n\t\t\\item under no circumstances should we use haskell\n\t\\end{enumerate}\n\t\\section{read the vocabulary}\n\t\\subsection{make meaning transparent}\n\t\\begin{enumerate}\n\t\t\\item yeah i'm also totally against the guess and check method\n\t\\end{enumerate}\n\t\\section{follow the flow}\n\t\\begin{enumerate}\n\t\t\\item i guess it's worth noting that this section is proposing a harsh imperative style? I'd imagine that declarative programming would be easier to understand, not having to get into the details of the implementation.\n\t\t\\begin{enumerate}\n\t\t\t\\item it'd be interesting to contrast the two; to try to teach R without using a single loop.\n\t\t\\end{enumerate}\n\t\\end{enumerate}\n\t\\section{show the data}\n\t\\begin{enumerate}\n\t\t\\item i'd want the value of each variable, and the value of the expression\n\t\t\\begin{enumerate}\n\t\t\t\\item AAAAAAAAAAAAA THE FUNCTIONS AREN\"T PURE\n\t\t\\end{enumerate}\n\t\\end{enumerate}\n\t\\section{get something on the screen as soon as possible}\n\t\\begin{enumerate}\n\t\t\\item this autocomplete thing is mostly a question of function naming\n\t\t\\begin{enumerate}\n\t\t\t\\item all this means is creating an alias layer around an existing library\n\t\t\t\\item ```javascript const betterNamedFunction = worse\\_named\\_function;\n\t\t\t\\item ```python better\\_named\\_function = worse\\_named\\_function;\n\t\t\\end{enumerate}\n\t\t\\item are we trying to make art?\n\t\t\\begin{enumerate}\n\t\t\t\\item i mean the way people talk about it\n\t\t\t\\item all this creativity talk\n\t\t\t\\item i don't know what i'm talking about\n\t\t\\end{enumerate}\n\t\t\\item before you can learn to `program' (verb), you must learn the `program' (noun). You feel me?\n\t\\end{enumerate}\n\t\\section{create by abstraction}\n\t\\begin{enumerate}\n\t\t\\item She \\emph{doesn't}. The learner should start by writing concrete code, and then \\emph{gradually \\sout{change} refactor} it to introduce abstraction.\n\t\t\\item The real power of programming comes when you have antifragile systems: ie, when you refactor properly.\n\t\t\\begin{enumerate}\n\t\t\t\\item if you want people to feel in control of the systems they write---they can bend it to their will---the systems they create have to be antifragile\n\t\t\t\\item not really. but they have to at least not be fragile.\n\t\t\t\\item and the best way to teach that is that is to start with very small, stable pieces.\n\t\t\\end{enumerate}\n\t\\end{enumerate}\n\t\\section{language}\n\t\\subsection{on languages}\n\t\\begin{enumerate}\n\t\t\\item smalltalk is a very good language\n\t\t\\item scheme/racket is also a very good language\n\t\t\\item learning scheme was a great idea for me but i don't think it's a good idea for people who aren't professional programmers; back to the `why are these people here' question.\n\t\t\\item i think that's the most important question we've got to ask.\n\t\t\\item parents need to understand their children probably won't become a 10x middle class software engineer haxx0r.\n\t\\end{enumerate}\n\t\\section{decomposition}\n\t\\begin{enumerate}\n\t\t\\item i think top down design is very useful from a project development perspective\n\t\t\\item bottom up is that looser, you feel it, more agile perspective\n\t\t\\item the best is not between, but both simultaneously. this is the perspective of the dao.\n\t\\end{enumerate}\n\t\\section{recomposition}\n\t\\begin{enumerate}\n\t\t\\item lol the issue is global state lololololol\n\t\t\\item i'm glad we can all agree that global state is shit\n\t\\end{enumerate}\n\\end{document}", "sh_code": [["mkdir", "junk_drawer"], ["latexmk", "--pdf", "-output-directory=junk_drawer", "learning-to-program.tex"], ["mv", "junk_drawer/learning-to-program.pdf", "./"]]}
